
        bool cmp(pair<int, int> a, pair<int, int> b)
        {
                if (a.first < b.first)
                        return true;
                if (a.first == b.first && a.second < b.second)
                        return true;
                return false;
        }
        int main()
        {
                int n;
                cin >> n;
                vector<pair<int, int>> arr;
                pair<int, int> s;
                for (int i = 0; i < n; i++)
                {
                        cin >> s.first >> s.second;
                        arr.push_back(s);
                }
                sort(arr.begin(), arr.end(), cmp);
                int ar[2 * n];
                queue<int> q1, q2;
                int m = 0;
                bool flag = true;
                for (int i = 0; i < 2 * n && flag; i++)
                {
                        if (i < n)
                        {
                                q1.push(arr[i].first);
                                q2.push(arr[i].second);
                        }
                        if (q1.empty() && q2.empty())
                        {
                                flag = false;
                                break;
                        }
                        if (!q1.empty() && q1.front() < q2.front())
                        {
                                if (m != 0 && ar[m - 1] != q1.front())
                                {
                                        ar[m] = q1.front();
                                        m++;
                                }
                                if (m == 0)
                                {
                                        ar[m] = q1.front();
                                        m++;
                                }
                                q1.pop();
                        }
                        else
                        {
                                if (ar[m - 1] != q2.front())
                                {
                                        ar[m] = q2.front();
                                        m++;
                                }
                                q2.pop();
                        }
                }
                for (int i = 0; i < m; i++)
                        cout << ar[i] << " ";
                cout << endl;
                int b = 0;
                int t = 0;
                int br[m], cr[m];
                for (int i = 0; i < m; i++)
                {
                        br[i] = 0;
                        cr[i] = 0;
                }
                for (int i = 0; i < n; i++)
                {
                        while (arr[i].first > ar[b])
                                b++;
                        int c = b;
                        while (c < m - 1 && arr[i].second > ar[c])
                        {
                                br[c]++;
                                c += 1;
                        }
                        t = i;
                }
                for (int i = 0; i < m - 1; i++)
                        cout << br[i] << " ";
                cout << endl;
                for (int i = 0; i < m; i++)
                        cout << cr[i] << " ";
                cout << endl;
                long long ans[n];
                for (int i = 0; i < n; i++)
                        ans[i] = 0;
                for (int i = 0; i < m - 1; i++)
                {
                        ans[br[i] - 1] += ar[i + 1] - ar[i] - 1;
                }
                for (int i = 0; i < m; i++)
                {
                        ans[cr[i] - 1]++;
                }
                for (int i = 0; i < n; i++)
                        cout << ans[i] << " ";
                cout << endl;
                return 0;      
        